[Global]
name = "P23"#beamline
beamtime = "I20180835"#unique id for each beamtime experiment
#scan_nos = [229,231,243]
scan_nos = [221,229,231,236,243,244]
phs = [10,13, 8, 13,7,13]
data_keys=['phs','scan_no','image_no','potential','potential_cal','current','peak_intensity','peak_intensity_error','bkg', \
           'pcov_ip', 'strain_ip','grain_size_ip','cen_ip','FWHM_ip', 'amp_ip', 'lfrac_ip','bg_slope_ip','bg_offset_ip',\
           'pcov_oop','strain_oop','grain_size_oop','cen_oop','FWHM_oop','amp_oop','lfrac_oop','bg_slope_oop','bg_offset_oop',\
           'H','K','L','phi','chi','mu', 'delta', 'gamma','omega_t','mon','transm',\
           'mask_cv_xrd','mask_ctr']
#center pix [x, y], x counted from left to right, y counted from up to down
#How to get the prim beam center
#From the pixel image, you read the center at [x, y]
#Transpose the peak at [y, x]
#Do numpy.flip(axis=1), you will get [y, x+(hor_width/2-x)*2], where hor_width is the number of total pix in horizontal direction (516 for p23 line)
cen = [697,320]#cen point index before clipping
clip_width ={'hor':100,'ver':100}#w.r.t peak center,half length
dim_detector = [1556,516]#after flip, ie [column width, row width]
live_image = True

[Data_Storage]
#data_folder = 'data'
ids_file_head='ids'#DaFy_path/data/ids
ids_files=['048_S221_CV','054_S229_CV','057_S231_CV','060_S236_CV','064_S243_CV','065_S244_CV']

[Image_Loader]
check_abnormality = True
#empirical value to remove abnormal points
#remove range:[max_mon - left_offset, max_mon +right_offset]
left_offset=10
right_offset =100
frame_prefix="i20180835"
nexus_path = 'F://P23_I20180835_Jun_2019'
constant_motors ={'omega_t':0.34, 'phi':0, 'chi':0} #phi and chi are always 0, you should check omega_t for the right value

[Film_Lattice]
film_material_cif = "Co3O4.cif"
film_hkl_bragg_peak = [[-1,1,3]]
film_hkl_normal = [1,1,1]
film_hkl_x = [1,1,-2]

[Reciprocal_Mapping]
ub=[-0.388904, -2.34687, 0.00424869, 0.000210428, -0.0104566, -0.889455, 2.48543, 0.905918, 0.00074013]
#cen = [697,320]
#cen = [258, 664]
#sample detection distance in mm
sdd = 750
#energy in KeV
e_kev = 22.5
#pixel size in mm
pixelsize = [0.055, 0.055]
boost_mapping = False

[Peak_Fit]
#the small integration window size(num of pix from one side. Smaller more reliable but worse statistics)
#fit boundaries for ip and oop cuts, you need to play with it a bit
#(x0, FWHM, area, lfrac, bg_slope, bg_offset)
#bounds for ip and oop
fit_bounds = {'hor':[[1.0, 0.0050, 0, 0, -100000, -1e6],[1.3, 0.42, 1e9, 1, 100000, 1e6]], 'ver':[[1.2, 0.0050, 0, 0, -100000, -1e6],[1.6, 0.42, 1e9, 1, 100000, 1e6]]}
fit_p0 = {'hor':[1.2, 0.21, 0.1, 0.5, 0, 0],'ver':[1.35, 0.21, 0.1, 0.5, 0, 0]}
fit_p0_2 = {'hor':[1.2, 0.21, 0.1, 0.5, 0, 0],'ver':[1.35, 0.21, 0.1, 0.5, 0, 0]}
#Cut and fit range for two-step peak-fitting processes, 
#First window should be big enough to cover the peak
#The first window use the detector center as the peak center for calculating fit range
#The second fit window use the peak center from the 1st step fit
cut_offset={'hor':[50,10],'ver':[50,10]}
data_range_offset={'hor':[70,70],'ver':[70,70]}
#use the first run fit results for the ip/oop position?
use_first_fit_for_pos = True
pot_step_scan = False

[Mask]
#remove abnormal point based on mon counter?
#check_abnormality = True
threshold = 9000
compare_method = 'larger'
#remove edges
remove_columns = [0,1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
remove_rows =  [0,1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
remove_pix = []
#equivalent to remove rows with q_ver between these range
remove_q_par = []
#equivalent to remove columns with q_par between these ranges
remove_q_ver = []
#eg line_strike_segments =[{'p1':[2.4,3.0],'p2':[2.55,3.3]},{'p1':[2.1,3.2],'p2'[2.75,3.5]}]
#each list item is a lib of two items with key=p1 and p2 without exception
#each list item define two ends of one line segment
#each point is of form [q_para, q_vert]
line_strike_segments = [{'p1':[2.4,3.2],'p2':[2.5,3.0]},{'p1':[2.4,3.0],'p2':[2.55,3.3]}]
line_strike_width = []

[Visulization]
vmax=200
vmin=0
cmap='jet'
pot_step = True

[Background_Subtraction]
#center_pix will be determined automatically, no need to change here
rod_scan = 0
check_level = 0.0000000001
peak_shift = 0
peak_width =70
update_width = False
row_width =80
col_width = 80
bkg_row_width = 10
bkg_col_width = 5
bkg_win_cen_offset_lr = 10
bkg_win_cen_offset_ud = 10
int_direct = 'x'
#if you want to have a linear bkg subtraction, set this to 1
ord_cus_s = [1]
#ss will be determined by cal the std of bkg region of each profile
ss = [1]
#ss_factor used to cal the ss: ss = std * ss_factor
#higher factor means higher noise level, play with this a bit. 
#the normal range is from 4 to 9
ss_factor = 0.1
#no need to change the cost function
fct = ['ah','sh','stq','atq'][-1]

[Correction_pars]
#this section is not used at this moment
corr_params = {'scale':1, 'geom':'psic','beam_slits':{'horz':0.06,'vert':1},'det_slits':None, 'sample':{'dia':10,'polygon':[],'angles':[]}}

[Spec_info]
#this section is not used at this moment
cell=[5,5,5,90,90,90]
or0_lib = {'delta':0,'eta':0,'chi':0,'phi':0, 'nu':0,'mu':0,'lam':0.75, 'h':[0,0,1]}
or1_lib = {'delta':0,'eta':0,'chi':0,'phi':0, 'nu':0,'mu':0,'lam':0.75, 'h':[1,0,0]}
n_azt = [0,0,1]
motors = {'delta':0,'eta':0,'chi':0,'phi':0,'nu':0,'mu':0}
mon = {'norm':1,'trams':1}

